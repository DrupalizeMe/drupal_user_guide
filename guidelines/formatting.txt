[[formatting]]
=== Using AsciiDoc to Format Text


[[asciidoc]]
==== AsciiDoc reference

The documentation in this project is formatted using
http://asciidoc.org[AsciiDoc], which is a fairly generic markdown-style
syntax. The
http://asciidoc.org/userguide.html[AsciiDoc user guide] explains the markup
syntax in detail, and a more concise but less complete
http://powerman.name/doc/asciidoc[AsciiDoc Cheat Sheet] is also available.

The remainder of this topic goes over some conventions that are specific to this
project.


[[style-sections]]
==== Creating chapters, topics, and sections

AsciiDoc supports several syntax styles for indicating chapters and
sections (not all of which are covered in all AsciiDoc manuals). This guide
uses the following syntax, with required identifiers on each chapter and
topic:

----
 = Overall Book Title


 [[first_chapter_id]]
 == Chapter Title One


 [[first_topic_id]]
 === Topic One


 [[first_section_id]]
 ==== Section title 1


 [[first_subsection_id]]
 ===== Sub section title 1
----

For readability of the source, leave two blank lines before the start of each
chapter, topic, and section. In this guide, the convention is that the main book
title and chapters are created in the main _guide.txt_ file. Each topic within
the chapter is in a separate include file, with an include statement in the
_guide.txt_ file. The idea is that the topics could be reassembled into
different guides if desired.

Chapter and topic titles should use "Title Case". Titles for any sections at
levels  below topics should use "Sentence case".

See also: <<choosing-titles>>


[[style-crosslinks]]
==== Cross-linking

Once you have a chapter or topic defined with an identifier,
you can make a cross-link by putting, for example:

----
 <<first_section_id>>
----

into your text. This will be formatted with the title of the section or
chapter, and (depending on the output format) a link and/or page number.
You can also change the link text by doing this:

----
 <<first_section_id,text for the link>>
----

[[style-glossary]]
==== Creating glossary entries

Glossary entries go into the _glossary.txt_ file. Keep them in alphabetical
order and follow the format of existing items in that file. Example:

----
[[glossary-cms]] Content Management System (CMS)::
    A collection of tools designed to allow the creation, modification,
    organization, search, retrieval and removal of information on a web site.
    See <<intro-drupal>>.
----

This entry starts with the ID +glossary-cms+, followed by the glossary entry
name and a double-colon. The definition starts on the next line, and is indented
4 spaces. It also includes a link to a topic that has more information --
glossary entries should only be a couple of lines long.

To cross-link to a glossary item in text, use syntax like this:

----
<<glossary-cms,CMS>>
----

That will make a cross-link with link text "CMS".


[[style-index]]
==== Creating index entries

Each topic should have at least one entry in the index. To define an index
entry, put this just before the paragraph text related to the entry:

----
(((Blocks,creating)))
----

Note that there is no space after the comma.

See also: <<choosing-titles>>


[[formatting-images]]
==== Including images

Here's the syntax to include an image:

----
// Comment explaining how to regenerate the image, for future contributors.
image:images/filename.png[alt text]
----

Some conventions:

* Images should be put in an images subdirectory.
* They should be PNG files.
* They should be scaled to a reasonable viewing size.
* If you annotate an image, be sure to use an annotation color with good
  contrast to both foreground and background colors.
* Always include "alt" text that describes what is in the image.
* A comment before the image is helpful, for people who may need to
  re-create the image, explaining how to generate it. See <<style-comments>>.
* See also <<good-writing-text>>.


[[style-literals]]
==== Literals and text formatting

File names and directories in text should be formatted in italics, as well as
new terms that are introduced:

----
_sites/default.settings.php_
_view_ (in the context of the Views module)
----

Programming details (functions, variables, etc.) and operating system
commands embedded in text should be formatted in monospace:

----
+my_function_name()+
+$foo+
----


[[style-code]]
==== Code blocks

Blocks of code should go into a literal block (which starts and ends with +----+
on its own line). You can prefix this with an indication of what type of code
is in the block, such as +[source,php]+ for PHP. Other recognized code types
include +css+, +javascript+, +sql+, +html+, etc. For generic source
code, such as commands to type at an operating system prompt, you can omit the
+[source,php]+ line.


[[style-comments]]
==== Comments

You can put comments into your AsciiDoc using double slashes, like PHP:

----
// This is a comment that is only relevant to someone reading
// the AsciiDoc source. It will not be displayed in the output.
----
