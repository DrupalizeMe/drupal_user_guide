[[install-composer]]

=== Telepítőfájlok letöltése Composer és Git használatával

[role="summary"]
Megismerjük, hogyan lehet az alaprendszer és más modulok fájljait a Composer és Git fejlesztőeszközökkel karbantartani.

(((Composer eszköz,az alaprendszer letöltése a használatával)))
(((Composer eszköz,modulok letöltése a használatával)))
(((Composer eszköz,sminkek letöltése a használatával)))
(((Letöltés,alaprendszer)))
(((Letöltés,smink)))
(((Letöltés,modul)))
(((Szoftverfüggőségek,kezelésük)))
(((Modul,letöltés)))
(((Smink,letöltés)))
(((Közösségi smink,letöltés)))
(((Közösségi modul,letöltés)))

==== Célkitűzés

Használjuk a Composer és Git fejlesztői eszközöket arra, hogy kezeljük az alaprendszer, a modulok és a sminkek függőségeit, azaz letöltsük a szükséges fájljaikat. Ha egyik eszközt sem használjuk, nyugodtan ugorjuk át ezt a témakört.

==== Szükséges előismeretek

<<install-tools>>

==== Webhely előfeltételei

A Git vagy Composer használatához ezeknek először is telepítve kell lenniük vagy a helyi fejlesztői környezetünkön, vagy az éles webhelyünk távoli kiszolgálóján. Erről bővebben lásd a <<install-tools>> témakört.

==== Lépések

Tekintve, hogy egy személyi számítógép és egy webkiszolgáló működése sok mindenben eltér, előfordulhat, hogy az alábbiakban leírt, a helyi fejlesztői környezetünkre való telepítésről szóló lépéssor alapján nem sikerül telepítenünk a Gitet vagy a Composert az éles webkiszolgálón. Ilyen esetekben javasolt a Gittel/Composerrel lokálhoszton elvégezni a frissítéseket az alábbi lépések alapján, majd a módosult könyvtárakat és fájlokat betömörítve felmásolni a távoli tárhelyünkre. Ott kicsomagolva remélhetőleg a helyi webhelypéldányunkkal megegyező fájlrendszert kapunk. Composer használata esetén különösen ügyeljünk az alábbiak módosulásaira a telepítésünk gyökerében:

* _vendor_ könyvtár
* _autoload.php_ fájl
* _composer.json_ fájl
* _composer.lock_ fájl

===== Egy projekt letöltése Gittel

A következő lépésekkel nemcsak a verziószámmal ellátott, előrecsomagolt kiadásait (angolul _„release”_) érhetjük el a Drupal.org-on lévő projekteknek (ez alatt együtt értjük a közösségi modulokat és sminkeket, de sokszor magát az alaprendszert is szokás projektnek nevezni), hanem az azok legfrissebb állapotát tükröző _dev_ változatát is.

. Számítógépünk parancssoros ablakában álljunk egy szinttel feljebb, mint amelyik könyvtárban majd szeretnénk, hogy az új szoftverelem létrejöjjön. Példának okáért a Drupal alaprendszer esetében ez mondjuk a webkiszolgálónk gyökérkönyvtára lehet, egy modul esetében pedig a _modules_ könyvtár. (Jó tanács haladóknak: ha majd később saját modulokat is elkezdünk írni webhelyünkhöz, akkor hasznos lehet a _modules_ könyvtárat tovább bontani a könnyebb áttekinthetőség kedvéért: egy _contrib_ alkönyvtárba kerülhetnek a Drupal.org-ról vagy más forrásból beszerzett, mások által készített modulok, míg a sajátjainkat egy _custom_ nevűben különíthetjük el.)

. Keressük meg a beszerezni kívánt modul projektoldalát a Drupal.org-on. Ezeket onnan könnyű felismerni, hogy mindig a _https://www.drupal.org/project/akarmi_ formában találjuk őket, ahol az „akarmi” a modul gépek által használt neve. Például a népszerű _Admin Toolbar_ modul projektoldalának webcíme: https://www.drupal.org/project/admin_toolbar.

. Itt kattintsunk a _Version control_ (magyarul „verziókövetés”) linkre a modul neve alatt, így az ezzel kapcsolatos Git-parancsokat leíró oldalra jutunk.

. Másoljuk ki az egész, +git clone+ paranccsal kezdődő sort a _Setting up repository for the first time_ (azaz „Tároló beállítása a legelső alkalommal”) szakaszcím alól. Ennek az alábbihoz hasonlónak kell lennie:
+
----
$ git clone --branch 8.6.x https://git.drupal.org/project/drupal.git
----

. Futtassuk le a parancssoros ablakban. Sikeres lefutást követően létrejön egy könyvtár a modul rövid nevével, ami annak a parancs +--branch+ argumentuma által jelzett verzióját tartalmazza. Ha szükséges, akár át is nevezhetjük ezt az új könyvtárat.

. Innentől kezdve ebbe az új könyvtárba belépve (+cd+ parancs) a jövőben bármikor futtathatjuk a +git pull+ parancsot, így mindig az adott projekt lehető legfrissebbváltozatát tudhatjuk a számítógépünkön (hacsak időközben ágat nem váltottunk).

Ha követtük a példánkat, és a _drupal_ projektet (azaz magát az alaprendszert) töltöttük le, akkor a Drupal külső függőségeinek beszerzéséhez folytassuk a következő szakaszban leírt lépésekkel.

===== Külső függőségek beszerzése Composerrel

A Git eszköz, amit az előző példánkban használtunk, nem gondoskodik egy szoftver külső, azaz más, nem Drupalhoz kötődő fejlesztők által közzétett elemeinek meglétéről. Erre ugyanis egy másik eszköz, a Composer való, amit most ki is próbálunk.

. Számítógépünk parancssoros ablakában álljunk a Drupal gyökérkönyvtárába.

. Adjuk ki a +composer install+ parancsot, ami automatikusan feltérképezi a szükséges követelményeket, és elkezdi letölteni őket gépünkre. Ez internetkapcsolatunk sebességétől függően akár több percig is eltarthat.

===== Alaprendszer letöltése Composerrel

Ahogy eddigre talán már kitalálta az Olvasó, ha a Composer képes letölteni más programok meghatározott verzióit, akkor képes lehet magát a Drupal alaprendszert is beszerezni a függőségeivel együtt. A következő lépéseket követve most ezt a módot fogjuk kipróbálni:

. Számítógépünk parancssoros ablakában álljunk egy szinttel feljebb, mint amelyik könyvtárban majd szeretnénk, hogy a Drupal létrejöjjön.

. Adjuk ki az alábbi parancsot, melyben a +webhelyem_neve+ részt helyettesítsük be a létrehozni kívánt könyvtárunk nevével:
+
----
$ composer create-project drupal/drupal webhelyem_neve
----

===== Projektek letöltése Composerrel

Külső függőségei azonban nemcsak az alaprendszernek lehetnek, hanem tulajdonképpen bármely közösségi modulnak vagy sminknek is. Ezért is különösen hasznos, hogy ha már meg is van a Drupal alaprendszerünk (akár a gites, akár a composeres úton), akkor a Composert is használhatjuk arra, hogy beszerezzük vele a kívánt verziókat az alábbi lépéseket követve:

. Bármikor, ha egy új, az adott webhelyen korábban még nem használt közösségi projektet (modult vagy sminket) szeretnénk hozzáadni a már meglévőkhöz, akkor először is a legelső lépés, hogy pontosan tudnunk kell a letölteni kívánt projekt gépek által használt nevét. Ez mindig csak az angol ábécé kisbetűiből áll, nem tartalmazhat szóközt, szavak elkülönítésére helyette az aláhúzás karaktert használja. Legkönnyebben a Drupal.org portálon a projektoldal webcímének végén találjuk. Például a _Geofield_ modulé a https://www.drupal.org/project/geofield URL-ben a +geofield+.

. Ha megvan a neve, akkor azt a következő parancsban a példaként használt „+geofield+” helyére behelyettesítve és egy parancssoros ablakban lefuttatva a Composer letölti a modult minden további szükséges függőségével együtt:
+
----
$ composer require drupal/geofield
----

===== Projektek frissítése Composerrel

Miután az előző részeknél leírtak szerint már használunk Composert a webhelyünk szoftverfüggőségeinek automatizált kezelésére, így a következő lépéseket követve már könnyedén elvégezhetjük mindezek rendszeres frissítését.

. Akárcsak telepítéskor (lásd fentebb), most is tudnunk kell a frissíteni kívánt modulok vagy sminkek gépi nevét. Az alaprendszeré +drupal+, a közösségi projektekét pedig megnézhetjük webhelyünk adminfelületén.

. Második lépésként meg kell határoznunk, hogy az adott szoftverelem melyik verzióját szeretnénk letöltetni a Composerrel. Ehhez jó, ha tudjuk, hogy a főverzió számát sosem kell külön megadnunk, hiszen az magától értetődő. Ha tehát azt látjuk a modul projektoldalán, hogy +8.x-1.7+ (amiben a kötőjel előtti szám webhelyünk Drupal-főverzióját jelöli), akkor a Composernek elég már csak az +1.7+ verziószámot megadnunk. Ugyanezt a logikát követve a +8.5.5+-ös alaprendszert elég csak +5.5+-ként leírnunk.

. Ha minden információ rendelkezésre áll, akkor a parancssoros ablakban webhelyünk gyökérkönyvtárában állva adjuk ki a következőhöz hasonló parancsot, melyben a +geofield+ mintát értelemszerűen a frissíteni kívánt projekt nevére cseréljük:
+
----
$ composer require drupal/geofield:1.7
----

//==== Az ismeretek elmélyítése

//==== Kapcsolódó témák

==== Videó

// Video from Drupalize.Me.
video::https://www.youtube-nocookie.com/embed/v-WeFthdmD4[title="Using Composer and Git to Download files"]

==== Egyéb források

https://www.drupal.org/docs/develop/using-composer/using-composer-with-drupal[Using Composer with Drupal] (azaz „A Drupal használata Composerrel”) című közösségi dokumentáció a Drupal.org-on angol nyelven.

*Közreműködők*

E témakör szövegét https://www.drupal.org/u/jhodgdon[Jennifer Hodgdon] és  https://www.drupal.org/u/eojthebrave[Joe Shindelar] (https://drupalize.me[Drupalize.Me]) a Drupal közösségi https://www.drupal.org/documentation[dokumentációjának] https://www.drupal.org/docs/develop/using-composer/using-composer-with-drupal[„Using Composer with Drupal”] (azaz „A Drupal használata Composerrel”) című szócikkéből vették át és szerkesztették, melynek szerzői joga 2000–2017 között azok egyéni közreműködőié. Fordította: https://www.drupal.org/u/balu-ertl[Balu Ertl] (https://www.drupal.org/brainsum[Brainsum]).
