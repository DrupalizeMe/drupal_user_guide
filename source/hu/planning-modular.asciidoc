[[planning-modular]]

=== Alapfogalom: a tartalmi építőelemek

[role="summary"]
Miért jó a tartalmat feldarabolni kisebb építőelemekre, majd hogyan lehet azokból újra összeállítani több másik oldalt.

(((Tartalom,elemes)))
(((Elemekre bontott tartalom,áttekintés)))
(((Oldal,elemekből álló)))
(((Részekből álló oldal,létrehozás tartalmi egységekből)))
(((Nézet,és moduláris tartalom)))
(((Views modul,áttekintés)))

==== Szükséges előismeretek

* <<planning-data-types>>
* <<planning-layout>>

==== Mit nevezünk moduláris tartalomnak?

A kezdeti időkben a weboldalak nagy, összefüggő HTML-fájlok voltak, melyek önmagukban jelentették a webhelyek egy-egy aloldalát. A tartalomkezelő rendszerekkel (mint amilyen a Drupal is) megvalósított dinamikus webhelyeken azonban már minden oldal sok kisebb, adatbázisban tárolt részletből áll össze. Éppen ezért annak érdekében, hogy a legjobban kiaknázzuk a CMS-ek képességeit, a webhely egyes oldalaira szánt tartalmainkat érdemes a lehető legkisebb részegységekre feldarabolnunk. Egy termelői piac webhelyén például a receptek részére készíthetünk egy külön tartalomtípust. Ha ez a „Recept” elnevezésű tartalomtípusunkban van mondjuk egy „Hozzávalók” részegység (Drupal-nyelven _mezőnek_ nevezzük), akkor ezután könnyűszerrel ki tudjuk listázni azokat a recepteket, amelyek elkészítéséhez például „sárgarépa” szükséges.

Ehhez hasonló módon a weboldalak más szakaszai is összeállíthatók automatikusan előállított részekből. Maradva a termelői piac webhelyünk példájánál, minden egyes recepttel együtt eltárolhatjuk egy _mezőben_, hogy melyik árus küldte be (ehhez lásd: <<structure-reference-fields>>), miközben magának az árusnak az adatait egy másik tartalomtípusba mentjük. Ezzel a következőkre nyílik lehetőségünk:

* Minden egyes recept oldalán egy kis oldaldobozban megjeleníthetjük az azt beküldő árus nevét és standjának számát.

* Hasonló módon, az árusok saját bemutatkozó oldalain megjeleníthetünk egy másik kis dobozt, amelyben az általa legutóbb feltöltött öt receptet soroljuk fel.

A legfontosabb az egészben, hogy minden egyes tartalmat (receptet és árust) csak egyetlen helyen kell módosítanunk, mégis sok más oldalán is megjelenhet a webhelynek. Ha például egy árus másik standra költözik és ezt átállítja a profiloldalán, onnantól minden receptjének az oldalán is már a friss információ fog megjelenni. Ha pedig egy új receptet tölt fel, akkor az automatikusan kikerül a saját profiloldalára is. Az ehhez hasonló, kereszthivatkozások mentén felépülő oldalak létrehozása leggyakrabban az alaprendszer _Views_ moduljával a legegyszerűbb. Erről bővebben a <<views-concept>> témakörben található további tudnivaló. Meg kell még említenünk a _nézetmódokat_ (<<structure-view-modes>>) is, amelyek nagyszerű lehetőséget kínálnak ugyanannak a tartalomtípusnak a különböző környezetben való eltérő megjelenítésére.

==== Kapcsolódó témák

* <<planning-structure>>
* <<structure-content-type>>
* <<structure-fields>>
* <<structure-reference-fields>>
* <<structure-view-modes>>
* <<views-concept>>

// ==== Egyéb források


*Közreműködők*

Írta: https://www.drupal.org/u/jhodgdon[Jennifer Hodgdon]. Fordította: https://www.drupal.org/u/balu-ertl[Balu Ertl] (https://www.drupal.org/brainsum[Brainsum]).
