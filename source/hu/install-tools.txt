[[install-tools]]

=== Alapfogalom: további hasznos eszközök

[role="summary"]
Ebben a témakörben áttekintjük, hogy még milyen praktikus kiegészítők segíthetik egy webhelyépítő munkáját.

(((Eszköz,Coder)))
(((Eszköz,Devel)))
(((Eszköz,Drush)))
(((Eszköz,Composer)))
(((Eszköz,Firebug)))
(((Eszköz,Git)))
(((Eszköz,Drupal Console)))
(((Coder eszköz,áttekintés)))
(((Devel eszköz,áttekintés)))
(((Drush eszköz,áttekintés)))
(((Composer eszköz,áttekintés)))
(((Firebug eszköz,áttekintés)))
(((Git eszköz,áttekintés)))
(((Drupal Console eszköz,áttekintés)))

// ==== Szükséges előismeretek

==== Milyen eszközök állnak rendelkezésünkre?

Az alábbiakban bemutatott eszközök célja az, hogy gyorsabban, pontosabban és kevesebb időbefektetéssel tudjunk webhelyeket építeni.

Drush::
  Ezzel a nélkülözhetetlen alkalmazással lentebb még bővebben is foglalkozunk.
Git::
  A https://git-scm.com/[Git] egy verziókövető rendszer, amivel akár csak modulok és sminkek saját könyvtárait, akár a webhely teljes kódbázisát felügyelhetjük: hol, mikor, milyen változtatás történt. A Git nyilvántartására támaszkodva biztonságosabban próbálhatunk ki módosításokat, mert ha egy változtatás nem sikeres, könnyen vissza tudunk állni az utolsó, még működőképes állapotra. Mivel a Drupal fájlokban is tárolja a konfigurációját, ezért a Git segítségével összehasonlíthatjuk és hordozhatjuk a beállításokat két webhelymásolat (például a helyi gépen futó és az élesítésre váró) között. Napjainkra a Git a nemzetközi webfejlesztési iparág _de facto_ szabványává vált.
Composer::
  Erről a másik nagyszerű segítségről is írunk még alább.
Devel::
  A https://www.drupal.org/project/devel[Devel] egy közösségi modul, ami rengeteg praktikus funkciót kínál a webfejlesztési feladatok elvégzéséhez, mint például a forráskód vizsgálatát, az adatbázis-lekérdezések elemzését és próba tartalmak tömeges előállítását tesztjelleggel.

==== Mitől különleges a Drush?

A http://www.drush.org[Drush] egy parancssorban futó alkalmazás, amellyel a Drupalnak adhatunk utasításokat kényelmesebben és gyorsabban, mintha ehhez az adminfelületen kellene kattintgatnunk. Sok webfejlesztő ahol csak tud, amikor csak lehet, Drusht használ a Drupal kezelésére, mert meggyőződésük, hogy a megismerésére és gyakorlására fordított tanulási idő hamar megtérül. Íme néhány érv, hogy miért lehet érdemes nekünk is áttérnünk a használatára:

* Rengeteg parancsot kínál szinte valamennyi feladathoz: a telepítéstől (nem csak modulokat vagy sminkeket, de magát az alaprendszert is akár) és frissítéstől kezdve a különböző adatbázisműveleteken át egészen a gyorsítótárak ürítéséig és jelszavak újragenerálásáig – csak hogy néhány előnyét említsük. Sőt, népszerűsége okán már más közösségi modulok és sminkek is definiálnak saját Drush-parancsokat a még gördülékenyebb üzemeltetés érdekében.

* A gyakori, sokat ismételt adminisztrációs feladatok elvégzése általában gyorsabb és kényelmesebb parancssorban begépelve, mint ugyanez az adminfelületen, több oldalbetöltésen keresztül navigálva.

* Mivel a Drush az adminfelületnél jóval mélyebb szinten, a számítógép parancssorában fut, ezért a kívánt műveletek egymás utáni elvégzésére automata szkriptek írhatóak, amik nem csak a Drupalt vezérelhetik, hanem akár a webszervert és a stack más elemeit (például adatbázisszerver, külső gyorsítótár szerver stb.) is.

* A Drush ezenkívül esetenként akár több lehetőséget is kínál, mint az adminfelület, például adatbázis-lekérdezések futtatását.

Ha sikerült felkelteni az érdeklődést a Drush kipróbálása iránt, akkor szükség lesz a parancssoron keresztüli hozzáférésre és a Drush kompatibilis verziójának feltelepítésére azon a számítógépen. További tudnivaló a telepítésről és kompatibilis verziókról a http://www.drush.org[Drush weboldalán] található. Ugyanott részletes dokumentáció is elérhető.

==== Mire jó a Composer?

A https://getcomposer.org/[Composer] a PHP-függőségek kezelésére szolgáló eszköz, aminek segítségével a fejlesztőnek elég csak definiálnia, hogy egy adott külső függvénykönyvtár melyik verziójára van szüksége a saját programjai futtatásához, és onnantól a Composer gondoskodik annak letöltéséről és telepítéséről.

A Drupal nagy mértékben támaszkodik a Composer szolgáltatásaira, mivel számos külső, Drupalon kívül készülő komponens lett beépítve a rendszerbe, és ezeknek mindig letöltve és telepítve kell lenniük a hibamentes működéshez. Az alaprendszer telepítésekor vagy le kell töltenünk egy tömörített állományt, ami tartalmazza e külső programok szükséges verzióit, vagy kézzel el kell indítanunk a Composert, hogy beszerezze azokat nekünk.

Közösségi modulok is megkövetelhetik a Composer használatát, például egy Facebook-kal való összeköttetést megvalósító modul igényli a Facebook által kiadott függvénykönyvtár meglétét a helyi szerveren, vagy egy földrajzi koordinátákat kezelő modulnak szüksége lehet egy adott geolokációs függvénykönyvtárra. Az ilyen, külső függőségekkel működő modulok és sminkek telepítéséhez futnia kell a Composernek.

==== Milyen segítség áll a modul- és sminkfejlesztők rendelkezésére?

Eddig azokról az eszközökről volt szó, amelyek leginkább a webhelyek építéséhez és üzemeltetéséhez hasznosak. Az alábbiakban azonban bemutatunk néhány olyat is, melyeknek inkább a modul- és sminkfejlesztők veszik nagy hasznát.

Drupal Console::
  A https://drupalconsole.com[Drupal Console] szintén egy parancssori eszköz, ami kapcsolatba lép a Drupal webhellyel és előregenerált kódrészleteket állít elő. Kérhetünk így blokkok vagy űrlapok programozásához sablon kódot, de szintén képes modulokat és sminkeket telepíteni, valamint próbatartalmat tömegesen előállítani. A Drupal Console tulajdonképpen a _Symfony Console_-ra épül.
Coder::
  A https://www.drupal.org/project/coder[Coder] modul ugyanúgy a parancssorban futtatható és arra készült, hogy segítsen az általunk írt forráskódot hozzáigazítani a projekt széleskörűen elfogadott és mások által is betartott szintaxis-szokásaihoz. Sőt, ha ezektől való eltérést észlel, akkor nem csak figyelmeztet minket, de akár ki is tudja javítani a hiányosságokat.
Firebug::
  A http://getfirebug.com[Firebug] egy beépülő volt a Firefox-hoz, amely lehetővé tette a böngészőbe betöltődő weboldal HTML, CSS és JavaScript forráskódjának elemzését, szerkesztését, hibakeresését egy külön böngészőablakban. Funkcionalitását mára felváltották a nagyobb böngészők gyárilag beépített fejlesztői eszköztárai. Ezekről itt olvashatunk bővebben: https://developer.chrome.com/devtools[Google Chrome Dev Tools] és https://developer.mozilla.org/en-US/docs/Tools[Mozilla Firefox Dev Tools].

==== Kapcsolódó témák

<<install-composer>>

==== Egyéb források

* https://www.drupal.org/node/147789[Development tools] (azaz „Fejlesztői eszközök”) című közösségi dokumentáció a Drupal.org-on angol nyelven.

* https://www.drupal.org/docs/develop/using-composer/using-composer-with-drupal[Using Composer with Drupal] (azaz „Drupal használata Composerrel”) című közösségi dokumentáció a Drupal.org-on angol nyelven.


*Közreműködők*

Írta és szerkesztette: https://www.drupal.org/u/batigolix[Boris Doesborg] és https://www.drupal.org/u/jhodgdon[Jennifer Hodgdon]. Fordította: https://www.drupal.org/u/balu-ertl[Balu Ertl] (https://www.drupal.org/brainsum/[Brainsum])
