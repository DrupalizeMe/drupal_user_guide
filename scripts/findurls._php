<?php

/**
 * @file
 * Find URLs in AsciiDoc text.
 *
 * Command-line argument: Source directory.
 *
 * What this script does is locate all strings that look like URLs in *.txt
 * files in the source directory, and output them in alphabetical order to
 * the standard output.
 */

if (count($argv) < 1) {
  exit("Usage: php (scriptname) sourcedir");
}

$source = $argv[1];

if (!is_dir($source)) {
  exit("Source directory is missing");
}

$urls = array();
process_dir($source, $urls);
sort($urls);
foreach ($urls as $url) {
  print $url . "\n";
}

/**
 * Processes a directory, recursively.
 *
 * @param string $dir
 *   Name of directory to process.
 * @param string[] $urls
 *   Array to save URLs in (passed by reference).
 */
function process_dir($dir, &$urls) {
  if ($dh = opendir($dir)) {
    while (($file = readdir($dh)) !== FALSE) {
      // If it's a directory other than . or .., process it.
      if (strpos($file, '.') === FALSE && is_dir($dir . '/' . $file)) {
        process_dir($dir . '/' . $file, $urls);
      }
      // If it's a .txt file, process it.
      elseif (preg_match('|^[a-zA-Z_.\-]+\.txt$|', $file)) {
        process_file($dir, $file, $urls);
      }
    }
    closedir($dh);
  }
}

/**
 * Processes one file: finds URLs in it.
 *
 * @param string $dir
 *   Directory where the file is.
 * @param string $file
 *   File name to process.
 * @param string[] $urls
 *   URL array to save URLs in (passed by reference).
 */
function process_file($dir, $file, &$urls) {
  $text = file_get_contents($dir . '/' . $file);
  $matches = array();

  if( $text &&
    preg_match_all('|http[s]*\:[/.-\w]+|', $text, $matches) &&
    count($matches[0]) > 0) {

    foreach ($matches[0] as $url) {
      // Skip URLs with example.com in them.
      if (!strpos($url, 'example.com')) {
        // Trim trailing / _ and . , and save URL in array.
        $url = trim($url, '/_.');
        $urls[$url] = $url;
      }
    }
  }
}
