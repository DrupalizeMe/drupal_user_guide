<?php

/**
 * @file
 * Find URLs in AsciiDoc text, and test them.
 *
 * Required command-line argument: Source directory.
 * Optional second argument: T to print OK responses (by default it
 * doesn't print anything if the URL is OK).
 *
 * What this script does is locate all strings that look like URLs in *.txt
 * files in the source directory, and test them. It prints out the response
 * code and the redirect URL if there is one.
 *
 * Examples:
 * @code
 *   # Only print problem URL responses.
 *   php testurls._php ../source
 *   # Print all responses.
 *   php testurls._php ../source T
 * @endcode
 *
 * @see search_replace._php
 */

if (count($argv) < 1) {
  exit("Usage: php (scriptname) sourcedir");
}

$source = $argv[1];
$print_ok = (count($argv) > 2 && $argv[2] == 'T');

if (!is_dir($source)) {
  exit("Source directory is missing");
}

$urls = array();
process_dir($source, $urls);
sort($urls);
foreach ($urls as $url) {
  test_url($url, $print_ok);
}

/**
 * Processes a directory, recursively.
 *
 * @param string $dir
 *   Name of directory to process.
 * @param string[] $urls
 *   Array to save URLs in (passed by reference).
 */
function process_dir($dir, &$urls) {
  if ($dh = opendir($dir)) {
    while (($file = readdir($dh)) !== FALSE) {
      // If it's a directory other than . or .., process it.
      if (strpos($file, '.') === FALSE && is_dir($dir . '/' . $file)) {
        process_dir($dir . '/' . $file, $urls);
      }
      // If it's a .txt file, process it.
      elseif (preg_match('|^[a-zA-Z_.\-]+\.txt$|', $file)) {
        process_file($dir, $file, $urls);
      }
    }
    closedir($dh);
  }
}

/**
 * Processes one file: finds URLs in it.
 *
 * @param string $dir
 *   Directory where the file is.
 * @param string $file
 *   File name to process.
 * @param string[] $urls
 *   URL array to save URLs in (passed by reference).
 */
function process_file($dir, $file, &$urls) {
  $text = file_get_contents($dir . '/' . $file);
  $matches = array();

  if( $text &&
    preg_match_all('|http[s]*\:[A-Za-z0-9-._~\%\:/\?\#\@\!\$&+=.]+|', $text, $matches) &&
    count($matches[0]) > 0) {

    foreach ($matches[0] as $url) {
      // Trim trailing _ which in our files usually means it's italics.
      // Also ending . which is usually punctuation.
      $url = trim($url);
      $url = trim($url, '_.');
      $urls[$url] = $url;
    }
  }
}

/**
 * Tests a URL, and prints the output.
 *
 * @param string $url
 *   URL to test.
 * @param bool $print_ok
 *   TRUE to print even if the status is 200; FALSE to omit printing in this
 *   case.
 */
function test_url($url, $print_ok) {
  $skip_strings = [
    // Example.com and translations thereof.
    'example.com',
    'pelda.hu',
    // Placeholders in attributions.txt file for translation.
    'drupal.org/u/person',
    // URLs for git and composer.
    'git.drupal.org/project',
    'packages.drupal.org',
  ];
  foreach ($skip_strings as $string) {
    if (strpos($url, $string) !== FALSE) {
      return;
    }
  }

  $handle = curl_init($url);
  curl_setopt($handle, CURLOPT_FOLLOWLOCATION, FALSE);
  curl_setopt($handle, CURLOPT_HEADER, TRUE);
  curl_setopt($handle, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($handle, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");

  $response = curl_exec($handle);
  $code = curl_getinfo($handle, CURLINFO_HTTP_CODE);
  if ($code != 200 || $print_ok) {
    print "$code for $url\n";
  }
  $redirect = curl_getinfo($handle, CURLINFO_REDIRECT_URL);
  if ($redirect) {
    print "===> $redirect\n";
  }
}
