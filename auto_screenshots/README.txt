This module does not do anything directly. All it contains is tests that can be
used to generate screen capture images, as well as database dumps and files
directories so you can clone the demo site as it would be at the end of each
chapter of the User Guide.

A list of images that could not be automated, and therefore need to be generated
manually, can be found in the source/en/images/README.txt file (under the main
project directory).


SETTING UP THE ENVIRONMENT
--------------------------

The screenshots can be generated by running the automated tests, which use the
JavascriptTestBase class from Drupal core, and then running a script to crop
the images. You will need to set up your environment as follows:

1. Set up PhantomJS -- see http://phantomjs.org/download.html -- or you may
   be able to install it using one of the following commands:

   sudo apt-get install phantomjs
   sudo yum install phantomjs

2. At the command line, make sure the "import" command from ImageMagick is
   installed. On Linux, use one of the following commands to install it, if it
   is not present:

   sudo apt-get install imagemagick
   sudo yum install imagemagick

3. Install a local test Drupal site, running the version of Drupal you want to
   generate screen shots for (Drupal 8.0.2, 8.1.0, etc. -- make sure it is the
   latest actual release, not a development branch, so that translations are
   downloaded correctly).

   You will also need to turn on the Interface Translation (locale) module,
   which requires the Language module.

   There is a Drupal core issue that affects screenshots:
     https://www.drupal.org/node/2886904
   If this is not yet fixed in your version of Drupal, you will need to install
   a fix, because it makes the open/closed icons for details elements on admin
   forms go away when viewed in Firefox. To fix this, edit your local copy of
   file
     core/assets/vendor/normalize-css/normalize.css
   and remove "summary" from getting CSS display: block around line 47.

   Also, this issue:
     https://www.drupal.org/node/2902700
   If that hasn't been fixed, you will also need to apply its patch, or the
   tests will not even run.

   You will also need to run
     composer install --dev
   to get the development dependencies installed. If you do not have Composer
   installed, see https://getcomposer.org/

4. Copy either this directory or the entire User Guide project directory
   into the top-level 'modules' directory of your local Drupal site.
   (Alternatively, if your operating system supports it, you can instead make
   a symbolic link.)

5. Run the command
   composer install
   to install dependencies of this project. If you do not have Composer
   installed, see https://getcomposer.org/

   This will install a Backup Migrate library from Github. You will need to
   make sure that this issue has been fixed in the version you download:

   https://github.com/backupmigrate/backup_migrate_core/issues/7

   If not, you'll need to edit the file
   vendor/backupmigrate/core/src/Source/MySQLiSource.php
   to put in the fix shown in that issue.

6. Download a near-current 8.x version of the Mayo theme to the /themes
   directory in your test site (for instance, if the current version is
   8.x-1.15, get 8.x-1.14). It is used for some of the screenshots.
   https://www.drupal.org/project/mayo

7. Do the same for a near-current version of the Admin Toolbar module
    from https://www.drupal.org/project/admin_toolbar


MAKING SCREENSHOTS
------------------

To make screenshots, you need to run the automated test for the language of
interest. You might also want to edit the $runList variable in the test class,
so that only a portion of the screenshots are run at the time, and so that
backups are made.

The test classes can be found in directory tests/src/FunctionalJavascript
and are called UserGuideDemoTestLL.php, where LL is the language code.

There is documentation on how to run tests at:
  https://www.drupal.org/docs/8/phpunit/phpunit-javascript-testing-tutorial
This involves starting up PhantomJS, setting up some environment variables in
your core/phpunit.xml file, and then running the tests using PHPUnit, with a
command from the root of your Drupal installation. So once you have your
phpunit.xml file configured, you can run a test by doing something like this:

# Do this once to start PhantomJS.
sudo phantomjs --ssl-protocol=any --ignore-ssl-errors=true \
  ./vendor/jcalderonzumba/gastonjs/src/Client/main.js 8510 1024 768 \
   2>&1 >> /dev/null &

# Do this for each test you want to run, changing the name of the test file.
sudo ./vendor/bin/phpunit -v -c core \
  ./modules/user_guide/auto_screenshots/tests/src/FunctionalJavascript/UserGuideDemoTestEn.php

Once you have run the tests, you will find output files, including screenshots,
in a new directory under sites/default/files/simpletest in your Drupal
installation. The screenshots are JPG files, and they will need to be trimmed
down and made into PNG files. You can use the scripts/cropimages.sh file to
do this, and then (after verifying), copy the new files into the
source/LL/images directory (where LL is the language code).


NOTE: There are several screenshots that are made only for English -- these
are screenshots of drupal.org pages. If you update them, you should copy them
to the other language directories:
- extend-manual-install-download.png
- extend-module-find_module_finder.png
- extend-module-find_search_results.png
- extend-module-find_project_info.png
- extend-module-install-download.png
- extend-theme-find_theme_finder.png
- extend-theme-find_search_results.png
- extend-theme-install-download.png
- install-prepare-recommended.png
- install-prepare-files.png
- security-update-module-release-notes.png


BACKUP AND RESTORE
------------------

The screenshot script also has the ability to make database and public files
backups at intermediate points (at the end of each chapter, roughly), so that
you can restore to those points and make only a subset of the screenshots (to
save time). See the documentation for the $runList member variable in the
UserGuideDemoTestBase class for details, and override the $runList variable in
the class for the language you are running.

The backups themselves are kept in the source repository for this project, in
subdirectory "backups" under this directory. They could also be used to set up
demo sites, by restoring the database and files manually. The database table
prefix is 'generic_simpletest_prefix'.

The new output of backups ends up in the same temporary directory as the
screenshots after running the tests.


MORE DETAILS FOR DEVELOPERS
---------------------------

The screen shot output is generated by a custom method in the UserGuideDemoTest
class called setUpScreenShot(). It takes as input a string of JavaScript
commands, which are run on the page to do things like clicking buttons, opening
up vertical tabs, and drawing boxes around highlighted items on the page. The
JavaScript also hides irrelevant areas of the page, which allows the ImageMagick
commands to trim the images down to their final sizes automatically.
